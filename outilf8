#!/usr/bin/perl
# -*- encoding: utf-8; indent-tabs-mode: nil -*-

use v5.10;
use strict;
use warnings;
use charnames ':full';
use Getopt::Long;
use subs qw/my_chr conversion recherche utf8_to_ucs4 ucs4_to_utf8 normalise_lg formattage/;

my %h2b = qw /0 0000 1 0001 2 0010 3 0011 4 0100 5 0101 6 0110 7 0111
              8 1000 9 1001 A 1010 B 1011 C 1100 D 1101 E 1110 F 1111/;

my %b2h = reverse %h2b;
my $txt;
binmode STDOUT, ':encoding(UTF-8)';

my $format = "%f U+%h &#%d; C-q %o %c %l\n";
my ($b_car, $b_html);
GetOptions('format=s'   => \$format,
           'caractere'  => \$b_car,
           'html'       => \$b_html,
  )
    or die "problème avec les options";

$format = "%c"    if $b_car;
$format = "&#%d;" if $b_html;

if (@ARGV == 0) {
  while (<>) {
    conversion $_;
  }
}
else {
  foreach (@ARGV) {
    conversion $_;
  }
}

sub my_chr {
  my ($num) = @_;
  if ($num >= 128 and $num <= 255) {
    my $ch = chr($num);
    utf8::upgrade($ch);
    return $ch;
  }
  else {
    return chr($num);
  }
}

sub conversion {
  local ($_) = @_;
  if (/^u\+[0-9a-f]+$/i) {
    ucs4_to_utf8 $_;
  }
  elsif (/^\&\#(\d+);$/) {
    ucs4_to_utf8(sprintf "U+%x", $1);
  }
  elsif (/^[0-9a-f]+$/) {
    utf8_to_ucs4 $_;
  }
  elsif (m{/((?:\\b)?[A-Za-z ]+(?:\\b)?)/}) {
    recherche $1;
  }
  else {
    print STDERR "$_ : inconnu\n";
  }
}

sub recherche {
  my ($re) = @_;
  $txt = do "unicore/Name.pl" unless $txt;
  for (grep { $_ =~ /$re/i } split "\n", $txt) {
    /^([0-9A-F]+)\s+/
      and ucs4_to_utf8(sprintf "U+%s", $1);
  }
}

sub utf8_to_ucs4 {
  local ($_) = @_;

  chomp;
  my $anc = normalise_lg $_, 10;
  $_ = uc $_;
  return unless /^[0-9A-F]+$/;
  s/([0-9A-F])/$h2b{$1}/g;

  if (/^0*(.......)$/) {
    $_ = '0' x 25 . $1;
  }
  elsif (/^0*110(.....)10(......)$/) {
    $_ = "0" x 21 . "$1$2";
  }
  elsif (/^0*1110(....)10(......)10(......)$/) {
    $_ = "0" x 16 . "$1$2$3";
  }
  elsif (/^0*11110(...)10(......)10(......)10(......)$/) {
    $_ = "000$1$2$3$4";
  }
  else {
    print STDERR "$anc : chaîne UTF-8 invalide\n";
    return;
  }

  s/(....)/$b2h{$1}/g;
  my $num = hex($_);
  print formattage($format, $num, $anc);
}

sub ucs4_to_utf8 {
  local ($_) = @_;
  chomp $_;

  $_ = uc(substr($_, 2));
  my $anc = 'U+' . normalise_lg($_, 8);

  my $num = hex($_);
  if ($num < 0x80) {
    $_ = "000000$_";
  }
  elsif ($num < 0x0800) {
    s/([0-9A-F])/$h2b{$1}/g;
    $_ = normalise_lg($_, 11);
    substr($_, 0, 0) ='110';
    substr($_, 8, 0) = '10';
    s/(....)/$b2h{$1}/g;
    $_ = "0000$_";
  }
  elsif ($num < 0x10000) {
    s/([0-9A-F])/$h2b{$1}/g;
    $_ = normalise_lg($_, 16);
    substr($_,  0, 0) = '1110';
    substr($_,  8, 0) = '10';
    substr($_, 16, 0) = '10';
    s/(....)/$b2h{$1}/g;
    $_ = "00$_";
  }
  else {
    s/([0-9A-F])/$h2b{$1}/g;
    $_ = normalise_lg($_, 21);
    substr($_,  0, 0) = '11110';
    substr($_,  8, 0) = '10';
    substr($_, 16, 0) = '10';
    substr($_, 24, 0) = '10';
    s/(....)/$b2h{$1}/g;
  }
  print formattage($format, $num, '00' . $_);
}

sub normalise_lg {
  my ($str, $lg) = @_;
  if (length($str) < $lg) {
    $str = '0' x ($lg - length($str)) . $_;
  }
  else {
    $str = substr($str, -$lg);
  }
  return $str;
}

sub formattage {
  my ($format, $codep, $utf8) = @_;
  my @elements = split /\%([cdfhlno])/, $format;
  for (my $i = 1; $i <= $#elements; $i += 2) {
    given ($elements[$i]) {
      when ('c') { $elements[$i] = my_chr($codep); }
      when ('d') { $elements[$i] =        $codep ; }
      when ('f') { $elements[$i] = $utf8; }
      when ('h') { $elements[$i] = sprintf("%08X",    $codep); }
      when ('l') { $elements[$i] = charnames::viacode($codep); }
      when ('n') { $elements[$i] = "\n"; }
      when ('o') { $elements[$i] = sprintf("%o",      $codep); }
    }    
  }
  return join '', @elements;
}

=encoding utf8

=head1 NOM

outilf8 - outil pour les conversions UTF-8 vers Unicode et inversement

=head1 VERSION

Cette documentation décrit C<outilf8> version 0.0.1.

=head1 UTILISATION

  # En mode bref, avec des arguments
  outilf8 u+e9 '&#171;' c2bb

  # En mode long, avec l'entrée standard
  outilf8
  u+e9
  &#171;
  c2bb
  ^D

=head1 ARGUMENTS OBLIGATOIRES

Les arguments sont facultatifs. S'il  n'y a aucun argument en ligne de
commande, l'outil lit l'entrée standard pour en extraire les arguments
à analyser  et à  convertir. S'il  y a au  moins un  argument, l'outil
ignore  son entrée  standard  et  analyse les  arguments  en ligne  de
commande.

Les arguments peuvent prendre ces deux formes :

  u+<nombre hexadécimal>
  &#<nombre décimal>;

Dans  ces  deux  cas,  le  nombre,  décimal  ou  hexadécimal,  est  le
I<codepoint> Unicode. Dans où l'on  fournit un nombre décimal en ligne
de commande, ne pas oublier d'encadrer la chaîne dans des apostrophes,
à cause du rôle spécial  de l'esperluète et du point-virgule en shell.
Bien que l'écriture habituelle des I<codepoints> Unicode se fasse avec
un S<« U »> majuscule et des chiffres hexadécimaux C<« A »> à C<« F »>
majuscules, il est possible de les spécifier en minuscules.

L'argument  peut également  prendre la  forme d'un  nombre hexadécimal
sans  préfixe.    Dans  ce  cas,   il  s'agit  d'une   suite  d'octets
correspondant  à l'écriture  du caractère  en UTF-8.  Comme ci-dessus,
l'utilisation des minuscules est autorisé.

Finalement,   l'argument   peut   être   une  chaîne   de   caractères
alphabétiques et blancs encadrés  par deux slashs. Cela représente une
chaîne de recherche pour fouiller dans la liste des noms normalisés de
caractères.   Cette  chaîne  peut  contenir  la  séquence  C<\b>  pour
représenter une limite de mot. C'est la seule séquence spéciale prévue
dans cette chaîne de recherche. La recherche se fait sans tenir compte
de la distinction minuscules-majuscules.

=head1 OPTIONS

=over 4

=item format

Il est possible  de choisir le format de sortie  de la conversion.  Le
format est une chaîne dans le genre des formats pour C<printf>.  C'est
une chaîne de caractères telle que "décimal %d -> %l".  La chaîne peut
contenir les digrammes suivants :

=over 4

=item C<%c>

Permet d'afficher le caractère correspondant au I<codepoint> entré.

=item C<%d>

Permet d'afficher le I<codepoint> en décimal.

=item C<%f>

Permet d'afficher  la suite d'octets correspondant  à l'encodage UTF-8
du  caractère.  Le nombre  est complété  par des  zéros pour  avoir 10
chiffres hexadécimaux.

=item C<%h>

Permet d'afficher le I<codepoint> en hexadécimal à huit chiffres.

=item C<%l>

Permet d'afficher le libellé normalisé du I<codepoint>.

=item C<%n>

Permet d'obtenir un passage à la ligne.

=item C<%o>

Permet d'afficher le I<codepoint> en octal.

=back

=item caractere

Option  sans  argument, abréviation  de  C<-format="%c">. Cela  permet
d'afficher le caractère et uniquement le caractère.

=item html

Option sans  argument, abréviation de  C<-format="&#%d;">. Cela permet
d'insérer le caractère dans un fichier HTML en ASCII 7-bits.

=back

=head1 DESCRIPTION

Cet   utilitaire  permet   d'effectuer  des   conversions   entre  les
I<codepoints> Unicode  et l'encodage  UTF-8. De plus,  le C<codepoint>
Unicode est donné en décimal, en hexadécimal et en octal et accompagné
du caractère lui-même et de son libellé normalisé.

Il  permet  également  d'effectuer  des  recherches  avec  le  libellé
normalisé, en utilisant un sous-ensemble d'expressions régulières.

Cet utilitaire peut facilement s'intégrer  à une session sous I<vi> ou
clone, notamment  le mode I<viper>  d'I<Emacs>. Dans un  texte normal,
placez le curseur à l'endroit voulu et, en mode commande, tapez :

  :r! outilf8 -c u+2660 u+2661 u+2662 u+2663

et vous  obtenez les quatres couleurs  des jeux de  cartes. Remarque :
C<-c> est l'abréviation de  C<-caractere>. Pas besoin d'en taper plus,
il faut que cela reste ergonomique. Et si votre fichier est un fichier
HTML, en mode commande tapez :

  :r! outilf8 -h u+2660 u+2661 u+2662 u+2663

et vous obtenez la série d'entités HTML correspondant aux couleurs des
jeux de cartes.

Si vous utilisez  I<Emacs> sans le mode I<viper>, ou  si vous avez des
problèmes pour  les commandes I<vi> contenant  un point d'exclamation,
vous  pouvez lancer  une session  shell  avec C<M-x  shell> (ou  C<M-x
cygwin-shell> sous  Windows si  vous préférez) et  exécuter C<outilf8>
dans cette  session. Il est  alors possible d'éditer le  résultat avec
les fonctions  habituelles d'I<Emacs>, notamment  de copier-coller des
caractères  du  tampon C<*shell*>  vers  le  tampon  de votre  fichier
texte. Quand je n'ai pas de problème avec les points d'exclamation, je
préfère  de loin  utiliser le  mode  I<viper> et  la fonction  C<:r!>.
Peut-être y a-t-il d'autres façons  de procéder avec I<Emacs>, mais la
façon  présentée ci-dessus  me semble  suffisamment ergonomique  et me
convient parfaitement.

Pour  la conversion  dans l'autre  sens, caractère  vers I<codepoint>,
utilisez la commande  standard C<what-cursor-position> d'I<Emacs>, qui
s'active  simplement avec  C<C-x  =>  (contrôle x  puis  égal). Je  ne
connais pas l'équivalent pour I<vi>.

=head1 DIAGNOSTICS

=over 4

=item Chaîne UTF-8 invalide

Un argument hexadécimal sans préfixe C<U+> contient une suite de bits
incompatible avec le codage UTF-8.

=item Inconnu

L'argument ne correspond pas aux quatres schémas connus : C<U+xxxx> ou
C<&#xxxx;> pour  un I<codepoint>  Unicode, un nombre  hexadécimal pour
une  séquence UTF-8  ou une  expression régulière  entre  deux slashs,
cette  expression régulière ne  pouvant contenir  que des  lettres, du
blanc et une balise C<\b> au début ou à la fin ou aux deux extrémités.

=back

=head1 CONFIGURATION ET ENVIRONNEMENT

Néant.

=head1 DÉPENDANCES

Néant.

=head1 INCOMPATIBILITÉS

Aucune incompatibilité identifiée.

=head1 BOGUES ET LIMITES

Pour l'instant, aucun n'a été identifié.

=head1 AUTEUR

Jean Forget, JFORGET (à) cpan.org

=head1 LICENCE ET COPYRIGHT

(C) Jean Forget, 2011, tous droits réservés.

Les termes  de licence  de ce  script sont les  mêmes termes  que pour
Perl : GNU General Public License (GPL) et Artistic License.

